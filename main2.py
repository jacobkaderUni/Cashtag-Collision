# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pzfYBKG5c131hwbOk-9zjiuvkcZ3z9po

Imports needed
"""

import os
import json
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay, classification_report, accuracy_score, f1_score, \
    precision_score, recall_score
from sklearn.naive_bayes import GaussianNB
from sklearn.naive_bayes import BernoulliNB
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn import svm
from scipy.sparse import csr_matrix
from scipy.sparse import csr_matrix
import numpy as np
from datetime import datetime, time
import seaborn as sns
import matplotlib.pyplot as plt
import itertools
import pandas as pd

from ModalTuner import ModelTuner
from FeatureExtraction import FeatureExtractor
from NB import NaiveBayesModel
from DT import DecisionTreeModel
from KNN import KNeighborsModel
from RF import RandomForestModel
from SVM import SVMmodel
from NN import NeuralNetworkModel

feature_extractor = FeatureExtractor('tweets.json', 10)


# Call the methods to extract features
X = feature_extractor.getFeatures()
# Extract labels
y = feature_extractor.getLabels()

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.20, random_state=0
)

# Create an instance of the ModelTuner class with the training data
tuner = ModelTuner(X_train, y_train)

# # Call the methods to tune the models
#
# best_paramsDT = tuner.tune_decision_tree()
# print("Best hyperparameters Decision Trees:", best_paramsDT)
#
# best_paramsKNN = tuner.tune_knn()
# print("Best hyperparameters KNN:", best_paramsKNN)
#
# best_paramsRF = tuner.tune_random_forest()
# print("Best hyperparameters Random Forest:", best_paramsRF)
#
# best_paramsSVM = tuner.tune_svm()
# print("Best hyperparameters SVM: ", best_paramsSVM)

""" NAIVE BAYES """
# # Instantiate the NaiveBayesModel class
# nb_model = NaiveBayesModel()
# # Train the model
# nb_model.train(X_train, y_train)
# # Make predictions
# NBpred = nb_model.predict(X_test)
# # Evaluate the model
# nb_model.evaluate(y_test, NBpred)
""" END """

""" DECISION TREES """
# # Instantiate the DecisionTreeModel class
# dt_model = DecisionTreeModel()
# # Train the model
# dt_model.fit(X_train, y_train)
# # Make predictions
# DTpred = dt_model.predict(X_test)
# # Evaluate the model
# dt_model.evaluate(y_test, DTpred)
# # Plot feature importances and save the plot as an image
# dt_model.plot_feature_importances(X_train)
""" END """


""" KEENS NEAREST NEIGHBORS """
# # Instantiate the DecisionTreeModel class
# knn_model = KNeighborsModel()
# # Train the model
# knn_model.fit(X_train, y_train)
# # Make predictions
# KNNpred = knn_model.predict(X_test)
# # Evaluate the model
# knn_model.evaluate(y_test, KNNpred)
""" END """

""" RANDOM FOREST """
# # Instantiate the DecisionTreeModel class
# rf_model = RandomForestModel()
# # Train the model
# rf_model.fit(X_train, y_train)
# # Make predictions
# RFpred = rf_model.predict(X_test)
# # Evaluate the model
# rf_model.evaluate(y_test, RFpred)
""" END """

""" SUPPORT VECTOR CLASSIFICATION """
# # Instantiate the DecisionTreeModel class
# svm_model = SVMmodel()
# # Train the model
# svm_model.fit(X_train, y_train)
# # Make predictions
# SVMpred = svm_model.predict(X_test)
# # Evaluate the model
# svm_model.evaluate(y_test, SVMpred)
""" END """

""" NEURAL NETWORKS """
my_Xtrain = np.vstack(X_train)
my_Xtest = np.vstack(X_test)
my_Ytrain = np.vstack(y_train)
my_Ytest = np.vstack(y_test)
nn_classifier = NeuralNetworkModel(input_dim=my_Xtrain.shape[1])
nn_classifier.train(my_Xtrain, my_Ytrain, my_Xtest, my_Ytest, epochs=10, batch_size=32)
nn_accuracy = nn_classifier.evaluate(my_Xtest, my_Ytest)
nn_pred = nn_classifier.predict(my_Xtest)
performance_metrics = nn_classifier.get_performance_metrics(my_Ytest, nn_pred, nn_accuracy)
""" END """

# Press the green button in the gutter to run the script.
if __name__ == '__main__':# See PyCharm help at https://www.jetbrains.com/help/pycharm/
    print(0)
    print("done")